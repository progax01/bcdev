{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"goerli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"linkReferences": {},
			"object": "6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723158205be069fea34870fb967e00b98e52e58edb014b1634dbd987c2b52dfbe67f153564736f6c634300050e0032",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 JUMPDEST 0xE0 PUSH10 0xFEA34870FB967E00B98E MSTORE 0xE5 DUP15 0xDB ADD 0x4B AND CALLVALUE 0xDB 0xD9 DUP8 0xC2 0xB5 0x2D 0xFB 0xE6 PUSH32 0x153564736F6C634300050E003200000000000000000000000000000000000000 ",
			"sourceMap": "13380:7847:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13380:7847:0;;;;;;;"
		},
		"deployedBytecode": {
			"linkReferences": {},
			"object": "6080604052600080fdfea265627a7a723158205be069fea34870fb967e00b98e52e58edb014b1634dbd987c2b52dfbe67f153564736f6c634300050e0032",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 JUMPDEST 0xE0 PUSH10 0xFEA34870FB967E00B98E MSTORE 0xE5 DUP15 0xDB ADD 0x4B AND CALLVALUE 0xDB 0xD9 DUP8 0xC2 0xB5 0x2D 0xFB 0xE6 PUSH32 0x153564736F6C634300050E003200000000000000000000000000000000000000 ",
			"sourceMap": "13380:7847:0:-;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "12400",
				"executionCost": "66",
				"totalCost": "12466"
			},
			"internal": {
				"addExp(struct Exponential.Exp memory,struct Exponential.Exp memory)": "infinite",
				"divExp(struct Exponential.Exp memory,struct Exponential.Exp memory)": "infinite",
				"divScalar(struct Exponential.Exp memory,uint256)": "infinite",
				"divScalarByExp(uint256,struct Exponential.Exp memory)": "infinite",
				"divScalarByExpTruncate(uint256,struct Exponential.Exp memory)": "infinite",
				"getExp(uint256,uint256)": "infinite",
				"isZeroExp(struct Exponential.Exp memory)": "infinite",
				"lessThanExp(struct Exponential.Exp memory,struct Exponential.Exp memory)": "infinite",
				"lessThanOrEqualExp(struct Exponential.Exp memory,struct Exponential.Exp memory)": "infinite",
				"mulExp(struct Exponential.Exp memory,struct Exponential.Exp memory)": "infinite",
				"mulExp(uint256,uint256)": "infinite",
				"mulExp3(struct Exponential.Exp memory,struct Exponential.Exp memory,struct Exponential.Exp memory)": "infinite",
				"mulScalar(struct Exponential.Exp memory,uint256)": "infinite",
				"mulScalarTruncate(struct Exponential.Exp memory,uint256)": "infinite",
				"mulScalarTruncateAddUInt(struct Exponential.Exp memory,uint256,uint256)": "infinite",
				"subExp(struct Exponential.Exp memory,struct Exponential.Exp memory)": "infinite",
				"truncate(struct Exponential.Exp memory)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}