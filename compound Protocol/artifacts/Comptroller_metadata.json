{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "action",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "pauseState",
						"type": "bool"
					}
				],
				"name": "ActionPaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "action",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "pauseState",
						"type": "bool"
					}
				],
				"name": "ActionPaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldCompAccrued",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newCompAccrued",
						"type": "uint256"
					}
				],
				"name": "CompAccruedAdjusted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newSpeed",
						"type": "uint256"
					}
				],
				"name": "CompBorrowSpeedUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "CompGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldCompReceivable",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newCompReceivable",
						"type": "uint256"
					}
				],
				"name": "CompReceivableUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newSpeed",
						"type": "uint256"
					}
				],
				"name": "CompSupplySpeedUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "contributor",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newSpeed",
						"type": "uint256"
					}
				],
				"name": "ContributorCompSpeedUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "compDelta",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "compBorrowIndex",
						"type": "uint256"
					}
				],
				"name": "DistributedBorrowerComp",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "supplier",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "compDelta",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "compSupplyIndex",
						"type": "uint256"
					}
				],
				"name": "DistributedSupplierComp",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "error",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "info",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "detail",
						"type": "uint256"
					}
				],
				"name": "Failure",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MarketEntered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MarketExited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					}
				],
				"name": "MarketListed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBorrowCap",
						"type": "uint256"
					}
				],
				"name": "NewBorrowCap",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldBorrowCapGuardian",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newBorrowCapGuardian",
						"type": "address"
					}
				],
				"name": "NewBorrowCapGuardian",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldCloseFactorMantissa",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newCloseFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "NewCloseFactor",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldCollateralFactorMantissa",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newCollateralFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "NewCollateralFactor",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldLiquidationIncentiveMantissa",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newLiquidationIncentiveMantissa",
						"type": "uint256"
					}
				],
				"name": "NewLiquidationIncentive",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldPauseGuardian",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newPauseGuardian",
						"type": "address"
					}
				],
				"name": "NewPauseGuardian",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract PriceOracle",
						"name": "oldPriceOracle",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "contract PriceOracle",
						"name": "newPriceOracle",
						"type": "address"
					}
				],
				"name": "NewPriceOracle",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "contract Unitroller",
						"name": "unitroller",
						"type": "address"
					}
				],
				"name": "_become",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_borrowGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "_grantComp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_mintGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newBorrowCapGuardian",
						"type": "address"
					}
				],
				"name": "_setBorrowCapGuardian",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setBorrowPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newCloseFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "_setCloseFactor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "newCollateralFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "_setCollateralFactor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract CToken[]",
						"name": "cTokens",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "supplySpeeds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "borrowSpeeds",
						"type": "uint256[]"
					}
				],
				"name": "_setCompSpeeds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contributor",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "compSpeed",
						"type": "uint256"
					}
				],
				"name": "_setContributorCompSpeed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newLiquidationIncentiveMantissa",
						"type": "uint256"
					}
				],
				"name": "_setLiquidationIncentive",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract CToken[]",
						"name": "cTokens",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "newBorrowCaps",
						"type": "uint256[]"
					}
				],
				"name": "_setMarketBorrowCaps",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setMintPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newPauseGuardian",
						"type": "address"
					}
				],
				"name": "_setPauseGuardian",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract PriceOracle",
						"name": "newOracle",
						"type": "address"
					}
				],
				"name": "_setPriceOracle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setSeizePaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setTransferPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					}
				],
				"name": "_supportMarket",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "accountAssets",
				"outputs": [
					{
						"internalType": "contract CToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "admin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "allMarkets",
				"outputs": [
					{
						"internalType": "contract CToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "borrowAmount",
						"type": "uint256"
					}
				],
				"name": "borrowAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "borrowCapGuardian",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "borrowCaps",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "borrowGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "borrowAmount",
						"type": "uint256"
					}
				],
				"name": "borrowVerify",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					}
				],
				"name": "checkMembership",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "holder",
						"type": "address"
					},
					{
						"internalType": "contract CToken[]",
						"name": "cTokens",
						"type": "address[]"
					}
				],
				"name": "claimComp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "holders",
						"type": "address[]"
					},
					{
						"internalType": "contract CToken[]",
						"name": "cTokens",
						"type": "address[]"
					},
					{
						"internalType": "bool",
						"name": "borrowers",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "suppliers",
						"type": "bool"
					}
				],
				"name": "claimComp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "holder",
						"type": "address"
					}
				],
				"name": "claimComp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "closeFactorMantissa",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compAccrued",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compBorrowSpeeds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compBorrowState",
				"outputs": [
					{
						"internalType": "uint224",
						"name": "index",
						"type": "uint224"
					},
					{
						"internalType": "uint32",
						"name": "block",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compBorrowerIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compContributorSpeeds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "compInitialIndex",
				"outputs": [
					{
						"internalType": "uint224",
						"name": "",
						"type": "uint224"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "compRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compReceivable",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compSpeeds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compSupplierIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compSupplySpeeds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "compSupplyState",
				"outputs": [
					{
						"internalType": "uint224",
						"name": "index",
						"type": "uint224"
					},
					{
						"internalType": "uint32",
						"name": "block",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "comptrollerImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "cTokens",
						"type": "address[]"
					}
				],
				"name": "enterMarkets",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cTokenAddress",
						"type": "address"
					}
				],
				"name": "exitMarket",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "affectedUsers",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"name": "fixBadAccruals",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getAccountLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllMarkets",
				"outputs": [
					{
						"internalType": "contract CToken[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getAssetsIn",
				"outputs": [
					{
						"internalType": "contract CToken[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBlockNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCompAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "cTokenModify",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "redeemTokens",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "borrowAmount",
						"type": "uint256"
					}
				],
				"name": "getHypotheticalAccountLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isComptroller",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract CToken",
						"name": "cToken",
						"type": "address"
					}
				],
				"name": "isDeprecated",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "lastContributorBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "cTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "repayAmount",
						"type": "uint256"
					}
				],
				"name": "liquidateBorrowAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "cTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualRepayAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "seizeTokens",
						"type": "uint256"
					}
				],
				"name": "liquidateBorrowVerify",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "cTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualRepayAmount",
						"type": "uint256"
					}
				],
				"name": "liquidateCalculateSeizeTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "liquidationIncentiveMantissa",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "markets",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isListed",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "collateralFactorMantissa",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isComped",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxAssets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "minter",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "mintAmount",
						"type": "uint256"
					}
				],
				"name": "mintAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "mintGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "minter",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualMintAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "mintTokens",
						"type": "uint256"
					}
				],
				"name": "mintVerify",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "oracle",
				"outputs": [
					{
						"internalType": "contract PriceOracle",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pauseGuardian",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingComptrollerImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposal65FixExecuted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "redeemTokens",
						"type": "uint256"
					}
				],
				"name": "redeemAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "redeemAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "redeemTokens",
						"type": "uint256"
					}
				],
				"name": "redeemVerify",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "payer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "repayAmount",
						"type": "uint256"
					}
				],
				"name": "repayBorrowAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "payer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualRepayAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "borrowerIndex",
						"type": "uint256"
					}
				],
				"name": "repayBorrowVerify",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "cTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "seizeTokens",
						"type": "uint256"
					}
				],
				"name": "seizeAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "seizeGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "cTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "seizeTokens",
						"type": "uint256"
					}
				],
				"name": "seizeVerify",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dst",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "transferTokens",
						"type": "uint256"
					}
				],
				"name": "transferAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "transferGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dst",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "transferTokens",
						"type": "uint256"
					}
				],
				"name": "transferVerify",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contributor",
						"type": "address"
					}
				],
				"name": "updateContributorRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Compound",
			"events": {
				"Failure(uint256,uint256,uint256)": {
					"details": "`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*"
				}
			},
			"kind": "dev",
			"methods": {
				"_grantComp(address,uint256)": {
					"details": "Note: If there is not enough COMP, we do not perform the transfer all.",
					"params": {
						"amount": "The amount of COMP to (possibly) transfer",
						"recipient": "The address of the recipient to transfer COMP to"
					}
				},
				"_setBorrowCapGuardian(address)": {
					"params": {
						"newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
					}
				},
				"_setCloseFactor(uint256)": {
					"details": "Admin function to set closeFactor",
					"params": {
						"newCloseFactorMantissa": "New close factor, scaled by 1e18"
					},
					"returns": {
						"_0": "uint 0=success, otherwise a failure"
					}
				},
				"_setCollateralFactor(address,uint256)": {
					"details": "Admin function to set per-market collateralFactor",
					"params": {
						"cToken": "The market to set the factor on",
						"newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
					},
					"returns": {
						"_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
					}
				},
				"_setCompSpeeds(address[],uint256[],uint256[])": {
					"params": {
						"borrowSpeeds": "New borrow-side COMP speed for the corresponding market.",
						"cTokens": "The markets whose COMP speed to update.",
						"supplySpeeds": "New supply-side COMP speed for the corresponding market."
					}
				},
				"_setContributorCompSpeed(address,uint256)": {
					"params": {
						"compSpeed": "New COMP speed for contributor",
						"contributor": "The contributor whose COMP speed to update"
					}
				},
				"_setLiquidationIncentive(uint256)": {
					"details": "Admin function to set liquidationIncentive",
					"params": {
						"newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
					},
					"returns": {
						"_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
					}
				},
				"_setMarketBorrowCaps(address[],uint256[])": {
					"details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
					"params": {
						"cTokens": "The addresses of the markets (tokens) to change the borrow caps for",
						"newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
					}
				},
				"_setPauseGuardian(address)": {
					"params": {
						"newPauseGuardian": "The address of the new Pause Guardian"
					},
					"returns": {
						"_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
					}
				},
				"_setPriceOracle(address)": {
					"details": "Admin function to set a new price oracle",
					"returns": {
						"_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
					}
				},
				"_supportMarket(address)": {
					"details": "Admin function to set isListed and add support for the market",
					"params": {
						"cToken": "The address of the market (token) to list"
					},
					"returns": {
						"_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
					}
				},
				"borrowAllowed(address,address,uint256)": {
					"params": {
						"borrowAmount": "The amount of underlying the account would borrow",
						"borrower": "The account which would borrow the asset",
						"cToken": "The market to verify the borrow against"
					},
					"returns": {
						"_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
					}
				},
				"borrowVerify(address,address,uint256)": {
					"params": {
						"borrowAmount": "The amount of the underlying asset requested to borrow",
						"borrower": "The address borrowing the underlying",
						"cToken": "Asset whose underlying is being borrowed"
					}
				},
				"checkMembership(address,address)": {
					"params": {
						"account": "The address of the account to check",
						"cToken": "The cToken to check"
					},
					"returns": {
						"_0": "True if the account is in the asset, otherwise false."
					}
				},
				"claimComp(address)": {
					"params": {
						"holder": "The address to claim COMP for"
					}
				},
				"claimComp(address,address[])": {
					"params": {
						"cTokens": "The list of markets to claim COMP in",
						"holder": "The address to claim COMP for"
					}
				},
				"claimComp(address[],address[],bool,bool)": {
					"params": {
						"borrowers": "Whether or not to claim COMP earned by borrowing",
						"cTokens": "The list of markets to claim COMP in",
						"holders": "The addresses to claim COMP for",
						"suppliers": "Whether or not to claim COMP earned by supplying"
					}
				},
				"enterMarkets(address[])": {
					"params": {
						"cTokens": "The list of addresses of the cToken markets to be enabled"
					},
					"returns": {
						"_0": "Success indicator for whether each corresponding market was entered"
					}
				},
				"exitMarket(address)": {
					"details": "Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.",
					"params": {
						"cTokenAddress": "The address of the asset to be removed"
					},
					"returns": {
						"_0": "Whether or not the account successfully exited the market"
					}
				},
				"getAccountLiquidity(address)": {
					"returns": {
						"_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
					}
				},
				"getAllMarkets()": {
					"details": "The automatic getter may be used to access an individual market.",
					"returns": {
						"_0": "The list of market addresses"
					}
				},
				"getAssetsIn(address)": {
					"params": {
						"account": "The address of the account to pull assets for"
					},
					"returns": {
						"_0": "A dynamic list with the assets the account has entered"
					}
				},
				"getCompAddress()": {
					"returns": {
						"_0": "The address of COMP"
					}
				},
				"getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
					"params": {
						"account": "The account to determine liquidity for",
						"borrowAmount": "The amount of underlying to hypothetically borrow",
						"cTokenModify": "The market to hypothetically redeem/borrow in",
						"redeemTokens": "The number of tokens to hypothetically redeem"
					},
					"returns": {
						"_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
					}
				},
				"isDeprecated(address)": {
					"details": "All borrows in a deprecated cToken market can be immediately liquidated",
					"params": {
						"cToken": "The market to check if deprecated"
					}
				},
				"liquidateBorrowAllowed(address,address,address,address,uint256)": {
					"params": {
						"borrower": "The address of the borrower",
						"cTokenBorrowed": "Asset which was borrowed by the borrower",
						"cTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral",
						"repayAmount": "The amount of underlying being repaid"
					}
				},
				"liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
					"params": {
						"actualRepayAmount": "The amount of underlying being repaid",
						"borrower": "The address of the borrower",
						"cTokenBorrowed": "Asset which was borrowed by the borrower",
						"cTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral"
					}
				},
				"liquidateCalculateSeizeTokens(address,address,uint256)": {
					"details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
					"params": {
						"actualRepayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens",
						"cTokenBorrowed": "The address of the borrowed cToken",
						"cTokenCollateral": "The address of the collateral cToken"
					},
					"returns": {
						"_0": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
					}
				},
				"mintAllowed(address,address,uint256)": {
					"params": {
						"cToken": "The market to verify the mint against",
						"mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
						"minter": "The account which would get the minted tokens"
					},
					"returns": {
						"_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
					}
				},
				"mintVerify(address,address,uint256,uint256)": {
					"params": {
						"actualMintAmount": "The amount of the underlying asset being minted",
						"cToken": "Asset being minted",
						"mintTokens": "The number of tokens being minted",
						"minter": "The address minting the tokens"
					}
				},
				"redeemAllowed(address,address,uint256)": {
					"params": {
						"cToken": "The market to verify the redeem against",
						"redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
						"redeemer": "The account which would redeem the tokens"
					},
					"returns": {
						"_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
					}
				},
				"redeemVerify(address,address,uint256,uint256)": {
					"params": {
						"cToken": "Asset being redeemed",
						"redeemAmount": "The amount of the underlying asset being redeemed",
						"redeemTokens": "The number of tokens being redeemed",
						"redeemer": "The address redeeming the tokens"
					}
				},
				"repayBorrowAllowed(address,address,address,uint256)": {
					"params": {
						"borrower": "The account which would borrowed the asset",
						"cToken": "The market to verify the repay against",
						"payer": "The account which would repay the asset",
						"repayAmount": "The amount of the underlying asset the account would repay"
					},
					"returns": {
						"_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
					}
				},
				"repayBorrowVerify(address,address,address,uint256,uint256)": {
					"params": {
						"actualRepayAmount": "The amount of underlying being repaid",
						"borrower": "The address of the borrower",
						"cToken": "Asset being repaid",
						"payer": "The address repaying the borrow"
					}
				},
				"seizeAllowed(address,address,address,address,uint256)": {
					"params": {
						"borrower": "The address of the borrower",
						"cTokenBorrowed": "Asset which was borrowed by the borrower",
						"cTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral",
						"seizeTokens": "The number of collateral tokens to seize"
					}
				},
				"seizeVerify(address,address,address,address,uint256)": {
					"params": {
						"borrower": "The address of the borrower",
						"cTokenBorrowed": "Asset which was borrowed by the borrower",
						"cTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral",
						"seizeTokens": "The number of collateral tokens to seize"
					}
				},
				"transferAllowed(address,address,address,uint256)": {
					"params": {
						"cToken": "The market to verify the transfer against",
						"dst": "The account which receives the tokens",
						"src": "The account which sources the tokens",
						"transferTokens": "The number of cTokens to transfer"
					},
					"returns": {
						"_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
					}
				},
				"transferVerify(address,address,address,uint256)": {
					"params": {
						"cToken": "Asset being transferred",
						"dst": "The account which receives the tokens",
						"src": "The account which sources the tokens",
						"transferTokens": "The number of cTokens to transfer"
					}
				},
				"updateContributorRewards(address)": {
					"params": {
						"contributor": "The address to calculate contributor rewards for"
					}
				}
			},
			"title": "Compound's Comptroller Contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"ActionPaused(address,string,bool)": {
					"notice": "Emitted when an action is paused on a market"
				},
				"ActionPaused(string,bool)": {
					"notice": "Emitted when an action is paused globally"
				},
				"CompAccruedAdjusted(address,uint256,uint256)": {
					"notice": "Emitted when COMP accrued for a user has been manually adjusted."
				},
				"CompBorrowSpeedUpdated(address,uint256)": {
					"notice": "Emitted when a new borrow-side COMP speed is calculated for a market"
				},
				"CompGranted(address,uint256)": {
					"notice": "Emitted when COMP is granted by admin"
				},
				"CompReceivableUpdated(address,uint256,uint256)": {
					"notice": "Emitted when COMP receivable for a user has been updated."
				},
				"CompSupplySpeedUpdated(address,uint256)": {
					"notice": "Emitted when a new supply-side COMP speed is calculated for a market"
				},
				"ContributorCompSpeedUpdated(address,uint256)": {
					"notice": "Emitted when a new COMP speed is set for a contributor"
				},
				"DistributedBorrowerComp(address,address,uint256,uint256)": {
					"notice": "Emitted when COMP is distributed to a borrower"
				},
				"DistributedSupplierComp(address,address,uint256,uint256)": {
					"notice": "Emitted when COMP is distributed to a supplier"
				},
				"MarketEntered(address,address)": {
					"notice": "Emitted when an account enters a market"
				},
				"MarketExited(address,address)": {
					"notice": "Emitted when an account exits a market"
				},
				"MarketListed(address)": {
					"notice": "Emitted when an admin supports a market"
				},
				"NewBorrowCap(address,uint256)": {
					"notice": "Emitted when borrow cap for a cToken is changed"
				},
				"NewBorrowCapGuardian(address,address)": {
					"notice": "Emitted when borrow cap guardian is changed"
				},
				"NewCloseFactor(uint256,uint256)": {
					"notice": "Emitted when close factor is changed by admin"
				},
				"NewCollateralFactor(address,uint256,uint256)": {
					"notice": "Emitted when a collateral factor is changed by admin"
				},
				"NewLiquidationIncentive(uint256,uint256)": {
					"notice": "Emitted when liquidation incentive is changed by admin"
				},
				"NewPauseGuardian(address,address)": {
					"notice": "Emitted when pause guardian is changed"
				},
				"NewPriceOracle(address,address)": {
					"notice": "Emitted when price oracle is changed"
				}
			},
			"kind": "user",
			"methods": {
				"_grantComp(address,uint256)": {
					"notice": "Transfer COMP to the recipient"
				},
				"_setBorrowCapGuardian(address)": {
					"notice": "Admin function to change the Borrow Cap Guardian"
				},
				"_setCloseFactor(uint256)": {
					"notice": "Sets the closeFactor used when liquidating borrows"
				},
				"_setCollateralFactor(address,uint256)": {
					"notice": "Sets the collateralFactor for a market"
				},
				"_setCompSpeeds(address[],uint256[],uint256[])": {
					"notice": "Set COMP borrow and supply speeds for the specified markets."
				},
				"_setContributorCompSpeed(address,uint256)": {
					"notice": "Set COMP speed for a single contributor"
				},
				"_setLiquidationIncentive(uint256)": {
					"notice": "Sets liquidationIncentive"
				},
				"_setMarketBorrowCaps(address[],uint256[])": {
					"notice": "Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
				},
				"_setPauseGuardian(address)": {
					"notice": "Admin function to change the Pause Guardian"
				},
				"_setPriceOracle(address)": {
					"notice": "Sets a new price oracle for the comptroller"
				},
				"_supportMarket(address)": {
					"notice": "Add the market to the markets mapping and set it as listed"
				},
				"accountAssets(address,uint256)": {
					"notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
				},
				"admin()": {
					"notice": "Administrator for this contract"
				},
				"allMarkets(uint256)": {
					"notice": "A list of all markets"
				},
				"borrowAllowed(address,address,uint256)": {
					"notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
				},
				"borrowVerify(address,address,uint256)": {
					"notice": "Validates borrow and reverts on rejection. May emit logs."
				},
				"checkMembership(address,address)": {
					"notice": "Returns whether the given account is entered in the given asset"
				},
				"claimComp(address)": {
					"notice": "Claim all the comp accrued by holder in all markets"
				},
				"claimComp(address,address[])": {
					"notice": "Claim all the comp accrued by holder in the specified markets"
				},
				"claimComp(address[],address[],bool,bool)": {
					"notice": "Claim all comp accrued by the holders"
				},
				"closeFactorMantissa()": {
					"notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
				},
				"compAccrued(address)": {
					"notice": "The COMP accrued but not yet transferred to each user"
				},
				"compBorrowSpeeds(address)": {
					"notice": "The rate at which comp is distributed to the corresponding borrow market (per block)"
				},
				"compBorrowState(address)": {
					"notice": "The COMP market borrow state for each market"
				},
				"compBorrowerIndex(address,address)": {
					"notice": "The COMP borrow index for each market for each borrower as of the last time they accrued COMP"
				},
				"compContributorSpeeds(address)": {
					"notice": "The portion of COMP that each contributor receives per block"
				},
				"compInitialIndex()": {
					"notice": "The initial COMP index for a market"
				},
				"compRate()": {
					"notice": "The rate at which the flywheel distributes COMP, per block"
				},
				"compReceivable(address)": {
					"notice": "Accounting storage mapping account addresses to how much COMP they owe the protocol."
				},
				"compSpeeds(address)": {
					"notice": "The portion of compRate that each market currently receives"
				},
				"compSupplierIndex(address,address)": {
					"notice": "The COMP borrow index for each market for each supplier as of the last time they accrued COMP"
				},
				"compSupplySpeeds(address)": {
					"notice": "The rate at which comp is distributed to the corresponding supply market (per block)"
				},
				"compSupplyState(address)": {
					"notice": "The COMP market supply state for each market"
				},
				"comptrollerImplementation()": {
					"notice": "Active brains of Unitroller"
				},
				"enterMarkets(address[])": {
					"notice": "Add assets to be included in account liquidity calculation"
				},
				"exitMarket(address)": {
					"notice": "Removes asset from sender's account liquidity calculation"
				},
				"fixBadAccruals(address[],uint256[])": {
					"notice": "Delete this function after proposal 65 is executed"
				},
				"getAccountLiquidity(address)": {
					"notice": "Determine the current account liquidity wrt collateral requirements"
				},
				"getAllMarkets()": {
					"notice": "Return all of the markets"
				},
				"getAssetsIn(address)": {
					"notice": "Returns the assets an account has entered"
				},
				"getCompAddress()": {
					"notice": "Return the address of the COMP token"
				},
				"getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
					"notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
				},
				"isComptroller()": {
					"notice": "Indicator that this is a Comptroller contract (for inspection)"
				},
				"isDeprecated(address)": {
					"notice": "Returns true if the given cToken market has been deprecated"
				},
				"lastContributorBlock(address)": {
					"notice": "Last block at which a contributor's COMP rewards have been allocated"
				},
				"liquidateBorrowAllowed(address,address,address,address,uint256)": {
					"notice": "Checks if the liquidation should be allowed to occur"
				},
				"liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
					"notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
				},
				"liquidateCalculateSeizeTokens(address,address,uint256)": {
					"notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
				},
				"liquidationIncentiveMantissa()": {
					"notice": "Multiplier representing the discount on collateral that a liquidator receives"
				},
				"markets(address)": {
					"notice": "Official mapping of cTokens -> Market metadata"
				},
				"maxAssets()": {
					"notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
				},
				"mintAllowed(address,address,uint256)": {
					"notice": "Checks if the account should be allowed to mint tokens in the given market"
				},
				"mintVerify(address,address,uint256,uint256)": {
					"notice": "Validates mint and reverts on rejection. May emit logs."
				},
				"oracle()": {
					"notice": "Oracle which gives the price of any given asset"
				},
				"pauseGuardian()": {
					"notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
				},
				"pendingAdmin()": {
					"notice": "Pending administrator for this contract"
				},
				"pendingComptrollerImplementation()": {
					"notice": "Pending brains of Unitroller"
				},
				"proposal65FixExecuted()": {
					"notice": "Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)"
				},
				"redeemAllowed(address,address,uint256)": {
					"notice": "Checks if the account should be allowed to redeem tokens in the given market"
				},
				"redeemVerify(address,address,uint256,uint256)": {
					"notice": "Validates redeem and reverts on rejection. May emit logs."
				},
				"repayBorrowAllowed(address,address,address,uint256)": {
					"notice": "Checks if the account should be allowed to repay a borrow in the given market"
				},
				"repayBorrowVerify(address,address,address,uint256,uint256)": {
					"notice": "Validates repayBorrow and reverts on rejection. May emit logs."
				},
				"seizeAllowed(address,address,address,address,uint256)": {
					"notice": "Checks if the seizing of assets should be allowed to occur"
				},
				"seizeVerify(address,address,address,address,uint256)": {
					"notice": "Validates seize and reverts on rejection. May emit logs."
				},
				"transferAllowed(address,address,address,uint256)": {
					"notice": "Checks if the account should be allowed to transfer tokens in the given market"
				},
				"transferVerify(address,address,address,uint256)": {
					"notice": "Validates transfer and reverts on rejection. May emit logs."
				},
				"updateContributorRewards(address)": {
					"notice": "Calculate additional accrued COMP for a contributor since last accrual"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"CP.sol": "Comptroller"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"CP.sol": {
			"keccak256": "0x709235452cdc3b24935a2ff2240aed918642746030bfce9580cf04535976aedb",
			"license": "MIT",
			"urls": [
				"bzz-raw://1905feb5816d1a08827d56419050943d99fce27b70dcf13461dfaca80cac9ee8",
				"dweb:/ipfs/Qmeuvoeg5QE996iMVaiLrLKQUJxR8pSeJTKLBSeo88oiJ4"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/CErc20.sol": {
			"keccak256": "0x73fb5617eaee108a1381986053d5867db329aa0d3e59b59ffe1bf4da0553d94b",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://b2f74248127513836fc1cebde0400689f815e7a271142b39e91265b531043afc",
				"dweb:/ipfs/QmdWeqoRD4CdeV1AmMYDKEFzoDXvWzfkWrm67Bmku9hhK7"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/CToken.sol": {
			"keccak256": "0x9b54ee8e83bff51505ececf52d9098e1b09b87960429e55e5d19da339b9e0387",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://d5f74fd8bb140276bedcf5732a0a400fffddcb4191b20f1be788e419c9ce6fc7",
				"dweb:/ipfs/QmY8vLMDeoxsEBA8cqa4mfEQPiD4mL7BngkzCAuLJeQwMi"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol": {
			"keccak256": "0x7d4526d84f489d61cb128cbbceb9add16b64bf0ae00097cac8c83b5662ffa1d9",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://a1eba59aea76970fc0dbd2db1e5bb6b9ba17c5366117ab0e138d053ed221baad",
				"dweb:/ipfs/Qmb9Xa78W8j4LJZo3MW5wvdxphCd2EEmQc7CcQJ7zAVJ1H"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/ComptrollerInterface.sol": {
			"keccak256": "0x4111ff0414696caca696cf36ecf3add15133933b51ba57c56cfb08989c82d44f",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://bed8b7b5ed928e0bb2056963df31825eafd648ea5313e57b4d12f62a54766e84",
				"dweb:/ipfs/QmVFrWFGDypompUL6Np68PE7ykdjSNf9DcepLKniJ1fgFk"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/ComptrollerStorage.sol": {
			"keccak256": "0x0dff6d19b6f74a4fd85d63ce6b6f213b3e9c118dd61185de4dadfc3d3b54182c",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://64c3cbc65cbeeb45351f3db2458452a740d0086545a1cc4d6179e8532c7bc73b",
				"dweb:/ipfs/QmacGXXXtTGfNrPiUxkFLkLJmqCwwjByTd3VTjLsnjAAZY"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/EIP20Interface.sol": {
			"keccak256": "0xf44fc7783d4a0060119f0096a122c3f305c7a03da75aa21408393d8d7a2e649b",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://98edcf6c8e46b8340174c4fbda657a8390d71167dfad2fef6d26b049659549db",
				"dweb:/ipfs/QmPiqcGe1te4TBiNGuDuBDwEjnhSQWqfqC85hFkbwFVXzi"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/EIP20NonStandardInterface.sol": {
			"keccak256": "0x5ce25bb36a4ec9490617567a24b55bc813e943bcd4411e060afffe122bea0416",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://ffb7208e6c62875cb0ee30940c5967411c8ddf6b259d52a445ee09fd7020d698",
				"dweb:/ipfs/QmX6HCfaWJxJsG4sK8EAzm75ymmJSgytxomXppgfnJgkh7"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/ErrorReporter.sol": {
			"keccak256": "0xc565694807fce4d9eb218b77d2e7eb7665e0d6950cbfa9edd1e3c09e417b809c",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://610e579eb6fbd8da9ba8f2d04f17b2213e858466177c488e2f3e4a37a314b864",
				"dweb:/ipfs/QmZmEvsi6qkvaPg6j2u3D3QZJbRtm2CPz8jf83HRkKrxuu"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/ExponentialNoError.sol": {
			"keccak256": "0x3a05062282ef8cbf6ec372abc73387ac8105a7eb0ea0f38069ebfd0f434ff98b",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://2aed68e944fba607a9eb176f7b5c0fe59f84d82e2e102b8d6db63ce5018548a9",
				"dweb:/ipfs/QmZJVBDDtFpqA8ZerzX4rGdBUsnA1tooHKxpKCWWvqRhJC"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol": {
			"keccak256": "0xe78ba89997df7bcbc0579b77a7e66c9b6c07e381797098f77b45302e59370b23",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://446c6cdaac7b245d365498602e289920600f6d039c496ad475361953acbdfb55",
				"dweb:/ipfs/QmYPTq95Jyi7RuXYDAN8CVxr3WQANBuRb35bcp8mRUnDv1"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/InterestRateModel.sol": {
			"keccak256": "0x470821c8ff2120381ead6f54dba5c7b4fc0209682062bde51ea20291176aa0be",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://183fcf6b83f8183ef7930b51a5438ef9ab5a16702b76ab953892e40ef3688e34",
				"dweb:/ipfs/QmTZXAJ6pCPiDbZmdzU1LpVzYru978ApNESrRqhGiKT4Lq"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/PriceOracle.sol": {
			"keccak256": "0x3bdb44d513360f19ba6e93960fbf37184cd7952492ab0ee4a91f514b3f2ea923",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://6cb12ba32bc5e5a3d5f42e17ea06e0aec41bc811643fd7cf90d3280d4947125c",
				"dweb:/ipfs/QmPnR5prTZQZdLFFb3kEtN5ioAZjnQsrbWX9zUwSKv542N"
			]
		},
		"https://github.com/compound-finance/compound-protocol/blob/master/contracts/Unitroller.sol": {
			"keccak256": "0xe8f57584490697b95ab1be9860432e219d1c960dad74e228abe6c06b8d9b61da",
			"license": "BSD-3-Clause",
			"urls": [
				"bzz-raw://2a5c8e69dc068984f5139078f2da656ce2e3ebcf260e9dde1064bdd62f85746a",
				"dweb:/ipfs/QmYHcSwmibuTA8YjxGbJqCLvaY9odjHzjLAfSNquTRjuR1"
			]
		}
	},
	"version": 1
}